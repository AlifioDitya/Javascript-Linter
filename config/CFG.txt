S -> IF S | SWITCH S | 
IF -> if ( EXPRESION ) { S } ENDLINE | IF ( EXPRESION ) { S } ELSE | IF ( EXPRESION ) { THROW }
ELSE -> { S } ENDLINE | IF
SWITCH -> switch ( VAR ) { CASE } ENDLINE | switch ( SWITCH )
CASE -> case VAR : S | CASE | DEFAULT
DEFAULT -> default: S ENDLINE
BOOLEAN -> true ENDLINE | false ENDLINE | BOOLEAN && BOOLEAN ENDLINE | BOOLEAN ENDLINE || BOOLEAN ENDLINE  | ! BOOLEAN ENDLINE | VARVAL is VARVAL ENDLINE | VARVAL EVAL VARVAL ENDLINE
EXPRESSION -> BOOLEAN | ( BOOLEAN ) | BRACKET
BRACKET -> ( VARVAL ) ENDLINE | ( ) ENDLINE | ( STRING ) ENDLINE
ENDLINE -> epsilon | ;
FOR -> for ( VAR ; EXPRESION ; ASSIGNMENT ) { S } | for ( LET ; EXPRESION ; ASSIGNMENT ) { S }
WHILE -> while ( EXPRESION ) { S } ENDLINE
FUNCTION  -> FUNCTION_IDENTIFIER ENDLINE | CONST function ( PARAM ) ENDLINE | CONST FUNCTION_IDENTIFIER ENDLINE | CONST ( PARAM ) => { S } ENDLINE 
FUNCTION_IDENTIFIER -> function IDENTIFIER ( PARAM ) BLOCK
PARAM -> VARVAL | VARVAL COMMA | DESTRUCT | epsilon
DESTRUCT -> { VARVAL } | { VARVAL COMMA }
COMMA -> , VARVAL | , VARVAL COMMA
BREAK -> break ENDLINE
CONTINUE -> continue ENDLINE
RETURN -> return ENDLINE | return EXPRESION ENDLINE | return VARVAL ENDLINE | return FUNCTION ENDLINE
DELETE -> delete VARVAL